terraform {
  required_providers {
    nsc = {
      source  = "mikluko/nsc"
      version = "~> 0.6"
    }
    local = {
      source  = "hashicorp/local"
      version = "~> 2.4"
    }
    docker = {
      source  = "kreuzwerker/docker"
      version = "~> 3.0"
    }
  }
}

variable "docker_host" {
  type    = string
  default = "unix:///var/run/docker.sock"
}

provider "docker" {
  host = var.docker_host
}

# Generate keys
resource "nsc_nkey" "operator" {
  type = "operator"
}

resource "nsc_nkey" "system_account" {
  type = "account"
}

resource "nsc_nkey" "application_account" {
  type = "account"
}

resource "nsc_nkey" "sys_admin" {
  type = "user"
}

resource "nsc_nkey" "app_user" {
  type = "user"
}

resource "nsc_nkey" "app_admin" {
  type = "user"
}

# Create operator JWT
resource "nsc_operator" "main" {
  name           = "MyOperator"
  subject        = nsc_nkey.operator.public_key
  issuer_seed    = nsc_nkey.operator.seed
  system_account = nsc_account.system.public_key
}

# Create system account JWT
resource "nsc_account" "system" {
  name        = "SYS"
  subject     = nsc_nkey.system_account.public_key
  issuer_seed = nsc_nkey.operator.seed

  # Full access for system account
  allow_pub = [">"]
  allow_sub = [">"]

  # System account exports for monitoring
  export {
    name                   = "account-monitoring-streams"
    subject                = "$SYS.ACCOUNT.*.>"
    type                   = "stream"
    account_token_position = 3
    description            = "Account specific monitoring stream"
    info_url               = "https://docs.nats.io/nats-server/configuration/sys_accounts"
  }

  export {
    name                   = "account-monitoring-services"
    subject                = "$SYS.REQ.ACCOUNT.*.*"
    type                   = "service"
    response_type          = "Stream"
    account_token_position = 4
    description            = "Request account specific monitoring services for: SUBSZ, CONNZ, LEAFZ, JSZ and INFO"
    info_url               = "https://docs.nats.io/nats-server/configuration/sys_accounts"
  }
}

# Create application account JWT
resource "nsc_account" "application" {
  name        = "Application"
  subject     = nsc_nkey.application_account.public_key
  issuer_seed = nsc_nkey.operator.seed

  # Default permissions for users in this account
  allow_pub = ["app.>", "_INBOX.>"]
  allow_sub = ["app.>", "_INBOX.>"]
  deny_pub  = ["app.admin.>"]
  deny_sub  = ["app.admin.>"]

  # Allow publishing responses
  allow_pub_response = 1
  response_ttl       = "5s"

  # Account limits (optional)
  max_connections   = 1000
  max_subscriptions = 10000
  max_data          = -1      # Unlimited data
  max_payload       = 1048576 # 1MB max message size

  # JetStream limits (optional, enables JetStream for this account)
  max_memory_storage = 1073741824  # 1GB memory storage
  max_disk_storage   = 10737418240 # 10GB disk storage
  max_streams        = 10
  max_consumers      = 100
}

# Create system account admin user
resource "nsc_user" "sys_admin" {
  name        = "sys_admin"
  subject     = nsc_nkey.sys_admin.public_key
  issuer_seed = nsc_nkey.system_account.seed

  # Full access to everything
  allow_pub = [">"]
  allow_sub = [">"]
}

# Create application user with limited permissions
resource "nsc_user" "app_user" {
  name        = "app_user"
  subject     = nsc_nkey.app_user.public_key
  issuer_seed = nsc_nkey.application_account.seed

  # Limited permissions - can't access admin topics
  allow_pub = ["app.data.>", "_INBOX.>"]
  allow_sub = ["app.data.>", "_INBOX.>"]
  deny_pub  = ["app.admin.>"]
  deny_sub  = ["app.admin.>"]

  # User-level limits
  max_subscriptions = 100       # Max number of subscriptions
  max_data          = 104857600 # 100MB max data per day
  max_payload       = 1048576   # 1MB max message size

  # Connection type restrictions - only standard connections
  allowed_connection_types = ["STANDARD"]
}

# Create application admin user
resource "nsc_user" "app_admin" {
  name        = "app_admin"
  subject     = nsc_nkey.app_admin.public_key
  issuer_seed = nsc_nkey.application_account.seed

  # Full access within the application account
  allow_pub          = [">"]
  allow_sub          = [">"]
  allow_pub_response = 50
  response_ttl       = "10s"
}

# Generate credentials files
data "nsc_creds" "sys_admin" {
  jwt  = nsc_user.sys_admin.jwt
  seed = nsc_nkey.sys_admin.seed
}

data "nsc_creds" "app_user" {
  jwt  = nsc_user.app_user.jwt
  seed = nsc_nkey.app_user.seed
}

data "nsc_creds" "app_admin" {
  jwt  = nsc_user.app_admin.jwt
  seed = nsc_nkey.app_admin.seed
}

# Generate NATS server configuration
locals {
  nats_config = <<-EOT
    # NATS Server Configuration with JWT Authentication
    # Generated by Terraform

    port: 4222

    # JWT-based operator mode
    operator: ${nsc_operator.main.jwt}

    # System account
    system_account: ${nsc_account.system.public_key}

    # Resolver for JWT/Accounts
    resolver: MEMORY
    resolver_preload: {
      ${nsc_account.system.public_key}: ${nsc_account.system.jwt}
      ${nsc_account.application.public_key}: ${nsc_account.application.jwt}
    }

    # Logging
    debug: false
    trace: false
    logtime: true
    log_file: "nats-server.log"

    # Monitoring
    http_port: 8222

    # Authorization timeout
    authorization {
      timeout: 2
    }

    # Max connections
    max_connections: 1024

    # Max payload size (10MB)
    max_payload: 10485760

    # Write timeout
    write_deadline: "10s"
  EOT

}

# Write NATS server config file
resource "local_file" "nats_config" {
  filename = "${path.module}/conf/nats-server.conf"
  content  = local.nats_config

  file_permission = "0644"
}

# Write user credentials files
resource "local_file" "app_user_creds" {
  filename = "${path.module}/creds/app_user.creds"
  content  = data.nsc_creds.app_user.creds

  file_permission = "0600"
}

resource "local_file" "app_admin_creds" {
  filename = "${path.module}/creds/app_admin.creds"
  content  = data.nsc_creds.app_admin.creds

  file_permission = "0600"
}

resource "local_file" "sys_admin_creds" {
  filename = "${path.module}/creds/sys_admin.creds"
  content  = data.nsc_creds.sys_admin.creds

  file_permission = "0600"
}

# Docker resources
resource "docker_image" "nats" {
  name         = "nats:latest"
  keep_locally = true
}

resource "docker_container" "nats" {
  image = docker_image.nats.image_id
  name  = "nats-jwt-example"

  ports {
    internal = 4222
    external = 4222
  }

  ports {
    internal = 8222
    external = 8222
  }

  volumes {
    host_path      = abspath(local_file.nats_config.filename)
    container_path = "/etc/nats/nats-server.conf"
    read_only      = true
  }

  command = ["-c", "/etc/nats/nats-server.conf"]

  restart = "unless-stopped"

  depends_on = [
    local_file.nats_config
  ]
}

# Outputs
output "docker_container" {
  value = {
    name   = docker_container.nats.name
    status = "Container '${docker_container.nats.name}' is running on ports 4222 and 8222"
    logs   = "docker logs ${docker_container.nats.name}"
    stop   = "docker stop ${docker_container.nats.name}"
  }
  description = "Docker container information"
}

output "connection_examples" {
  value = {
    app_user  = "nats --creds ${abspath(local_file.app_user_creds.filename)} --server nats://localhost:4222 sub 'app.>'"
    app_admin = "nats --creds ${abspath(local_file.app_admin_creds.filename)} --server nats://localhost:4222 pub app.test 'Hello World'"
    sys_admin = "nats --creds ${abspath(local_file.sys_admin_creds.filename)} --server nats://localhost:4222 sub '>'"
  }
  description = "Example commands to connect to the server with different users"
}

output "test_commands" {
  value = {
    server_info  = "curl http://localhost:8222/varz"
    account_info = "nats --creds ${abspath(local_file.sys_admin_creds.filename)} --server nats://localhost:4222 req '$SYS.REQ.ACCOUNT.*.CONNZ' ''"
    test_publish = "nats --creds ${abspath(local_file.app_admin_creds.filename)} --server nats://localhost:4222 pub app.test 'Test Message'"
  }
  description = "Commands to test the server setup"
}

output "generated_files" {
  value = {
    server_config   = abspath(local_file.nats_config.filename)
    app_user_creds  = abspath(local_file.app_user_creds.filename)
    app_admin_creds = abspath(local_file.app_admin_creds.filename)
    sys_admin_creds = abspath(local_file.sys_admin_creds.filename)
  }
  description = "Paths to all generated files"
}
